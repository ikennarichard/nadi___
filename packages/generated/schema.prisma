datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  role      UserRole @default(BUYER)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile        Profile?
  products       Product[]
  purchases      Purchase[]
  subscriptions  Subscription[]
  affiliateLinks AffiliateLink[]
  communities    Community[]     @relation("CreatorCommunities")
  transactions   Transaction[]
  wallet         Wallet?

  communityMembers CommunityMember[]
  messages         Message[]
  reviews          Review[]
}

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  firstName       String
  lastName        String
  displayName     String?
  bio             String?
  avatar          String?
  phone           String?
  country         String   @default("Nigeria")
  niche           String[]
  expertise       String[]
  verifiedCreator Boolean  @default(false)
  planType        PlanType @default(FREE)
  website         String?
  twitter         String?
  instagram       String?
  whatsapp        String?
}

model Product {
  id          String        @id @default(cuid())
  creatorId   String
  creator     User          @relation(fields: [creatorId], references: [id])
  title       String
  description String
  price       Decimal       @db.Decimal(10, 2)
  currency    String        @default("NGN")
  category    Category
  tags        String[]
  fileUrl     String
  fileName    String
  fileSize    Int
  fileType    String
  status      ProductStatus @default(DRAFT)
  featured    Boolean       @default(false)
  views       Int           @default(0)
  sales       Int           @default(0)
  rating      Decimal?      @db.Decimal(3, 2)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  reviews     Review[]
  purchases   Purchase[]
}

model Community {
  id            String            @id @default(cuid())
  creatorId     String
  creator       User              @relation("CreatorCommunities", fields: [creatorId], references: [id])
  name          String
  description   String
  price         Decimal           @db.Decimal(10, 2)
  currency      String            @default("NGN")
  billingType   BillingType
  memberLimit   Int?
  chatEnabled   Boolean           @default(true)
  forumEnabled  Boolean           @default(true)
  liveEnabled   Boolean           @default(false)
  subscriptions Subscription[]
  members       CommunityMember[]
  messages      Message[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model CommunityMember {
  id          String    @id @default(cuid())
  communityId String
  userId      String
  role        String    @default("member")
  createdAt   DateTime  @default(now())
  community   Community @relation(fields: [communityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Message {
  id          String    @id @default(cuid())
  communityId String
  userId      String
  content     String
  createdAt   DateTime  @default(now())
  community   Community @relation(fields: [communityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String
  productId String
  amount    Decimal  @db.Decimal(10, 2)
  currency  String   @default("NGN")
  status    String   @default("PAID")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Transaction {
  id               String            @id @default(cuid())
  userId           String
  user             User              @relation(fields: [userId], references: [id])
  type             TransactionType
  amount           Decimal           @db.Decimal(10, 2)
  currency         String            @default("NGN")
  paymentMethod    String
  paymentGateway   String
  gatewayReference String?
  status           TransactionStatus
  description      String?
  productId        String?
  subscriptionId   String?
  affiliateId      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model AffiliateLink {
  id             String    @id @default(cuid())
  affiliateId    String
  affiliate      User      @relation(fields: [affiliateId], references: [id])
  code           String    @unique
  productId      String?
  communityId    String?
  commissionRate Decimal   @db.Decimal(5, 2)
  totalClicks    Int       @default(0)
  totalSales     Int       @default(0)
  totalEarnings  Decimal   @default(0) @db.Decimal(10, 2)
  isActive       Boolean   @default(true)
  expiresAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   BigInt   @default(0) // store in kobo minor units
  currency  String   @default("NGN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id           String    @id @default(cuid())
  userId       String
  communityId  String
  status       String    @default("ACTIVE")
  period       String    @default("MONTHLY")
  currentStart DateTime  @default(now())
  currentEnd   DateTime
  user         User      @relation(fields: [userId], references: [id])
  community    Community @relation(fields: [communityId], references: [id])
}

enum UserRole {
  BUYER
  CREATOR
  AFFILIATE
  ADMIN
}

enum PlanType {
  FREE
  PRO
  ENTERPRISE
}

enum Category {
  EDUCATION
  DIGITAL_SKILLS
  BUSINESS
  FITNESS
  RELATIONSHIPS
  RELIGION
  ENTERTAINMENT
  VOCATIONAL
}

enum TransactionType {
  PRODUCT_PURCHASE
  SUBSCRIPTION_PAYMENT
  AFFILIATE_COMMISSION
  WITHDRAWAL
  REFUND
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  REVERSED
}

enum BillingType {
  MONTHLY
  YEARLY
  ONE_TIME
}

enum ProductStatus {
  DRAFT
  PUBLISHED
}
